/*
 *    Copyright 2021 ParkerTenBroeck
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */
package org.parker.mips.architecture.syscall.internal;

import org.parker.mips.architecture.syscall.SystemCallPluginFrame;
import org.parker.mips.architecture.syscall.SystemCallRunTimeException;

import javax.swing.*;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.io.*;
import java.util.Scanner;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.logging.Level;


public class UserIO extends SystemCallPluginFrame {

    private static PrintStream out;
    private static DocInputStream in;

    public void openUserIO() {
        if (!isVisible()) {
            setVisible(true);
        }
    }

    public static int getInt() {
        Scanner inScan = new Scanner(in);
        try {
            return inScan.nextInt();
        }catch(Exception e){
            throw new SystemCallRunTimeException("Invalid Input, Possible causes number is floating point?, invalid characters used?");
        }
    }

    public static void clearOutput() {
        outputTextArea.setText("");
    }

    public static String getString(){
        try {
            BufferedReader br = new BufferedReader(new InputStreamReader(in));
            return br.readLine();
        }catch(Exception e){
            return "";
        }
    }

    public UserIO() {
        super("UserIO");
        this.setTitle("UserIO");
        initComponents();
        out = new PrintStream(new OutputStream() {
            @Override
            public void write(int b) {
                outputTextArea.append(String.valueOf((char) b));
            }
        });
        DocInputStream dis = new DocInputStream();
        in = dis;
        inputTextFeild.addKeyListener(dis);
    }

    public static void outputUnicode(int c) {
        out.print((char)c);
    }

    public static void outputString(String message){
        out.print(message);
    }

    public static void outputNumber(int val) {
        out.print(val);
    }

    public static char getNextChar() {

        while (in.available() == 0) {
            try {
                Thread.sleep(100);
            } catch (Exception e) {

            }
        }

        try {
            return (char) in.read();
        } catch (IOException e) {
            return 0;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        modernScrollPane1 = new JScrollPane();
        outputTextArea = new javax.swing.JTextArea();
        themedJButton1 = new javax.swing.JButton();
        inputTextFeild = new javax.swing.JTextField();

        setTitle("User IO");
        addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                formFocusGained(evt);
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        outputTextArea.setEditable(false);
        outputTextArea.setColumns(20);
        outputTextArea.setRows(5);
        outputTextArea.setFocusable(false);
        outputTextArea.setRequestFocusEnabled(false);
        modernScrollPane1.setViewportView(outputTextArea);

        themedJButton1.setText("Clear");
        themedJButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                themedJButton1ActionPerformed(evt);
            }
        });

        inputTextFeild.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputTextFeildActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(inputTextFeild)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(themedJButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(modernScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 976, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(modernScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 467, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(inputTextFeild, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(themedJButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_formFocusGained
        inputTextFeild.requestFocus();
    }//GEN-LAST:event_formFocusGained

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        stopProcessor();
    }//GEN-LAST:event_formWindowClosing

    private void themedJButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_themedJButton1ActionPerformed
        out.flush();
        in.clear();
        clearOutput();
    }//GEN-LAST:event_themedJButton1ActionPerformed

    private void inputTextFeildActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputTextFeildActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_inputTextFeildActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static javax.swing.JTextField inputTextFeild;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane modernScrollPane1;
    private static javax.swing.JTextArea outputTextArea;
    private javax.swing.JButton themedJButton1;
    // End of variables declaration//GEN-END:variables



    private class DocInputStream extends InputStream implements KeyListener {

        ArrayBlockingQueue<Integer> queue;

        public DocInputStream(){
            queue=new ArrayBlockingQueue<Integer>(1024);
        }

        @Override
        public int read() throws IOException {
            Integer i=null;
            try {
                i = queue.take();
            } catch (InterruptedException ex) {
                LOGGER.log(Level.SEVERE, null, ex);
            }
            if(i!=null)
                return i;
            return -1;
        }
        public void clear(){
            queue.clear();
        }

        @Override
        public int read(byte[] b, int off, int len) throws IOException {
            if (b == null) {
                throw new NullPointerException();
            } else if (off < 0 || len < 0 || len > b.length - off) {
                throw new IndexOutOfBoundsException();
            } else if (len == 0) {
                return 0;
            }
            int c = read();
            if (c == -1) {
                return -1;
            }
            b[off] = (byte)c;

            int i = 1;
            try {
                for (; i < len && available() > 0 ; i++) {
                    c = read();
                    if (c == -1) {
                        break;
                    }
                    b[off + i] = (byte)c;
                }
            } catch (IOException ee) {
            }
            return i;

        }



        @Override
        public int available(){
            return queue.size();
        }

        @Override
        public void keyTyped(KeyEvent e) {
            int c = e.getKeyChar();
            try {
                queue.put(c);
            } catch (InterruptedException ex) {
                LOGGER.log(Level.SEVERE, "", ex);
            }
            if(e.getKeyChar() == '\n'){
                out.println(inputTextFeild.getText());
                inputTextFeild.setText("");
            }
        }

        @Override
        public void keyPressed(KeyEvent e) {

        }

        @Override
        public void keyReleased(KeyEvent e) {
        }

    }
}
