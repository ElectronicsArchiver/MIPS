/*
 *    Copyright 2021 ParkerTenBroeck
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */
package org.parker.mips.gui;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import org.parker.mips.core.MIPS;
import org.parker.mips.architectures.BaseComputerArchitecture;
import org.parker.mips.gui.components.FlatMatteBorder;
import org.parker.mips.gui.components.FlatZeroWidthSplitPane;
import org.parker.mips.gui.userpanes.editor.rsyntax.FormattedTextEditor;
import org.parker.mips.log.LogPanel;

import javax.swing.*;
import java.awt.*;

public class MainGUI_2 extends JFrame {
    private JPanel rootPanel;
    private JButton assembleButton;
    private JButton startButton;
    private JButton stopButton;
    private JButton singleStepButton;
    private JButton resetButton;
    private JButton memoryButton;
    private JButton disassembleButton;
    private JLabel versionLabel;
    private UserPaneTabbedPane userPaneTabbedPane1;
    private test test1;
    private JPanel buttonsPanel;
    private JSplitPane hSplitter;
    private JSplitPane vSplitter;

    private final BaseComputerArchitecture bca;

    public static void main(String... args) {
        //new MainGUI_2();
    }

    public MainGUI_2(BaseComputerArchitecture bca) {
        this.bca = bca;
        $$$setupUI$$$();
        this.add(rootPanel);
        this.versionLabel.setText(MIPS.VERSION);
        this.buttonsPanel.setBorder(new FlatMatteBorder(0, 0, 1, 0));
        this.pack();
        this.setExtendedState(JFrame.MAXIMIZED_BOTH);
        this.setVisible(true);

    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        rootPanel = new JPanel();
        rootPanel.setLayout(new GridLayoutManager(2, 2, new Insets(0, 0, 0, 0), -1, -1));
        final Spacer spacer1 = new Spacer();
        rootPanel.add(spacer1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        vSplitter.setContinuousLayout(true);
        vSplitter.setOneTouchExpandable(false);
        vSplitter.setOrientation(0);
        vSplitter.setResizeWeight(1.0);
        rootPanel.add(vSplitter, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, new Dimension(200, 200), null, 0, false));
        final LogPanel logPanel1 = new LogPanel();
        logPanel1.setVisible(true);
        vSplitter.setRightComponent(logPanel1);
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        vSplitter.setLeftComponent(panel1);
        hSplitter.setAutoscrolls(true);
        hSplitter.setContinuousLayout(true);
        hSplitter.setOneTouchExpandable(false);
        panel1.add(hSplitter, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, new Dimension(200, 200), null, 0, false));
        hSplitter.setLeftComponent(test1.$$$getRootComponent$$$());
        hSplitter.setRightComponent(userPaneTabbedPane1);
        buttonsPanel = new JPanel();
        buttonsPanel.setLayout(new GridLayoutManager(1, 9, new Insets(5, 5, 5, 5), -1, -1));
        rootPanel.add(buttonsPanel, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        assembleButton = new JButton();
        assembleButton.setText("Assemble");
        buttonsPanel.add(assembleButton, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer2 = new Spacer();
        buttonsPanel.add(spacer2, new GridConstraints(0, 7, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        startButton = new JButton();
        startButton.setText("Start");
        buttonsPanel.add(startButton, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        stopButton = new JButton();
        stopButton.setText("Stop");
        buttonsPanel.add(stopButton, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        singleStepButton = new JButton();
        singleStepButton.setText("Single Step");
        buttonsPanel.add(singleStepButton, new GridConstraints(0, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        resetButton = new JButton();
        resetButton.setText("Reset");
        buttonsPanel.add(resetButton, new GridConstraints(0, 4, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        memoryButton = new JButton();
        memoryButton.setText("Memory");
        buttonsPanel.add(memoryButton, new GridConstraints(0, 5, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        disassembleButton = new JButton();
        disassembleButton.setText("Disassemble");
        buttonsPanel.add(disassembleButton, new GridConstraints(0, 6, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        versionLabel = new JLabel();
        versionLabel.setText("VERSION");
        buttonsPanel.add(versionLabel, new GridConstraints(0, 8, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return rootPanel;
    }

    private void createUIComponents() {
        hSplitter = new FlatZeroWidthSplitPane();
        vSplitter = new FlatZeroWidthSplitPane();
        test1 = new test(bca);
        userPaneTabbedPane1 = new UserPaneTabbedPane();
        new FormattedTextEditor();
    }
}
