/*
 *    Copyright 2021 ParkerTenBroeck
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

package org.parker.assembleride.gui;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import org.parker.assembleride.architecture.ArchitecturePluginHandler;
import org.parker.assembleride.architecture.BaseComputerArchitecture;
import org.parker.assembleride.architecture.ComputerArchitecture;

import javax.swing.*;
import java.awt.*;
import java.util.Collections;
import java.util.Set;
import java.util.WeakHashMap;
import java.util.logging.Level;
import java.util.logging.Logger;

public class ToolBar extends JPanel {
    private JPanel rootPanel;
    private JButton disassembleButton;
    private JButton memoryButton;
    private JButton resetButton;
    private JButton singleStepButton;
    private JButton stopButton;
    private JButton startButton;
    private JButton assembleButton;
    private JPanel buttonPanel;

    private static final Logger LOGGER = Logger.getLogger(ToolBar.class.getName());
    private static final Set<ToolBar> aliveToolBars = Collections.newSetFromMap(new WeakHashMap<>());
    private static BaseComputerArchitecture bca;

    static {
        ComputerArchitecture ca = ArchitecturePluginHandler.getCurrentArchitecture();
        if (ca instanceof BaseComputerArchitecture) {
            bca = (BaseComputerArchitecture) ca;
        } else {
            LOGGER.log(Level.SEVERE, "Cannot use ToolBar with a non BaseComputerArchitecture");
        }
    }

    public static ToolBar ToolBarFactory() {
        ToolBar toolBar = new ToolBar();

        toolBar.assembleButton.addActionListener((ae) -> {
            LOGGER.log(Level.FINER, "Assemble Button Action Preformed");
            bca.onAssembleButton(ae);
        });

        toolBar.startButton.addActionListener((ae) -> {
            LOGGER.log(Level.FINER, "Start Processor Button Action Preformed");
            bca.onStartButton(ae, toolBar.startButton.isSelected());
        });

        toolBar.stopButton.addActionListener((ae) -> {
            LOGGER.log(Level.FINER, "Stop Processor Button Action Preformed");
            bca.onStopButton(ae);
        });

        toolBar.singleStepButton.addActionListener((ae) -> {
            LOGGER.log(Level.FINER, "Single Step Processor Button Action Preformed");
            bca.onSingleStepButton(ae);
            //refresh();
        });

        toolBar.resetButton.addActionListener((ae) -> {
            LOGGER.log(Level.FINER, "Reset Processor Button Action Preformed");
            bca.onResetButton(ae);
        });

        toolBar.memoryButton.addActionListener((ae) -> {
            LOGGER.log(Level.FINER, "Memory Button Action Preformed");
            bca.onMemoryButton(ae);
        });

        toolBar.disassembleButton.addActionListener(e -> {
            LOGGER.log(Level.FINER, "Disassemble Button Action Preformed");
            bca.onDisassembleButton(e);
        });

        aliveToolBars.add(toolBar);

        return toolBar;
    }

    public static void setControlsEnabled(boolean enabled) {
        for (ToolBar toolBar : aliveToolBars) {
            SwingUtilities.invokeLater(() -> {
                toolBar.assembleButton.setEnabled(enabled);
                toolBar.startButton.setEnabled(enabled);
                toolBar.stopButton.setEnabled(enabled);
                toolBar.singleStepButton.setEnabled(enabled);
                toolBar.resetButton.setEnabled(enabled);
                toolBar.memoryButton.setEnabled(enabled);
                toolBar.disassembleButton.setEnabled(enabled);

                toolBar.buttonPanel.repaint();
            });
        }
    }

    private ToolBar() {

    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        rootPanel.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        buttonPanel = new JPanel();
        buttonPanel.setLayout(new GridLayoutManager(1, 7, new Insets(0, 0, 0, 0), -1, -1));
        rootPanel.add(buttonPanel, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        disassembleButton = new JButton();
        disassembleButton.setText("Disassemble");
        buttonPanel.add(disassembleButton, new GridConstraints(0, 6, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        memoryButton = new JButton();
        memoryButton.setText("Memory");
        buttonPanel.add(memoryButton, new GridConstraints(0, 5, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        resetButton = new JButton();
        resetButton.setText("Reset");
        buttonPanel.add(resetButton, new GridConstraints(0, 4, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        singleStepButton = new JButton();
        singleStepButton.setText("Single Step");
        buttonPanel.add(singleStepButton, new GridConstraints(0, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        stopButton = new JButton();
        stopButton.setText("Stop");
        buttonPanel.add(stopButton, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        startButton = new JButton();
        startButton.setText("Start");
        buttonPanel.add(startButton, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        assembleButton = new JButton();
        assembleButton.setText("Assemble");
        buttonPanel.add(assembleButton, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        rootPanel.add(spacer1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return rootPanel;
    }

    private void createUIComponents() {
        this.rootPanel = this;
    }
}
