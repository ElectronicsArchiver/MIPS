/* The following code was generated by JFlex 1.6.1 */

/*
Copyright (c) 2019, Robert Futrell
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the author nor the names of its contributors may
      be used to endorse or promote products derived from this software
      without specific prior written permission.
 */

package org.parker.assembleride.gui.docking.userpanes.editor.rsyntax;

import org.fife.ui.rsyntaxtextarea.Token;
import javax.swing.text.Segment;
import java.io.*;
import org.fife.ui.rsyntaxtextarea.*;


/**
 * This class takes plain text and returns tokens representing MIPS
 * assembler.<p>
 *
 * This implementation was created using
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1; however, the generated file
 * was modified for performance.  Memory allocation needs to be almost
 * completely removed to be competitive with the handwritten lexers (subclasses
 * of <code>AbstractTokenMaker</code>, so this class has been modified so that
 * Strings are never allocated (via yytext()), and the scanner never has to
 * worry about refilling its buffer (needlessly copying chars around).
 * We can achieve this because RText always scans exactly 1 line of tokens at a
 * time, and hands the scanner this line as an array of characters (a Segment
 * really).  Since tokens contain pointers to char arrays instead of Strings
 * holding their contents, there is no need for allocating new memory for
 * Strings.<p>
 *
 * The actual algorithm generated for scanning has, of course, not been
 * modified.<p>
 *
 * If you wish to regenerate this file yourself, keep in mind the following:
 * <ul>
 *   <li>The generated <code>MIPSTokenMaker.java</code> file will contain two
 *       definitions of both <code>zzRefill</code> and <code>yyreset</code>.
 *       You should hand-delete the second of each definition (the ones
 *       generated by the lexer), as these generated methods modify the input
 *       buffer, which we'll never have to do.</li>
 *   <li>
 *       the generated code  if (zzMarkedPosL > zzStartRead) { is to be replaced
 *       by  if (zzMarkedPosL > 0) {
 *   </li>
 *   <li>You should also change the declaration/definition of zzBuffer to NOT
 *       be initialized.  This is a needless memory allocation for us since we
 *       will be pointing the array somewhere else anyway.</li>
 *   <li>You should NOT call <code>yylex()</code> on the generated scanner
 *       directly; rather, you should use <code>getTokenList</code> as you would
 *       with any other <code>TokenMaker</code> instance.</li>
 * </ul>
 *
 * @author Robert Futrell
 * @version 0.2
 *
 */

public class MIPSTokenMaker extends AbstractJFlexTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int EOL_COMMENT = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\15\1\23\1\22\1\67\1\70\1\22\16\15\4\0\1\23\1\32"+
    "\1\17\1\0\1\66\1\25\1\26\1\20\2\0\1\25\1\25\1\0"+
    "\1\25\1\34\1\25\1\3\1\4\1\64\1\65\1\6\1\6\1\6"+
    "\1\6\1\2\1\2\1\24\1\21\1\27\1\33\1\30\2\0\1\43"+
    "\1\11\1\5\1\35\1\36\1\37\1\46\1\57\1\40\1\1\1\53"+
    "\1\10\1\47\1\42\1\51\1\52\1\63\1\50\1\44\1\60\1\13"+
    "\1\62\1\56\1\12\1\61\1\55\1\0\1\16\1\0\1\25\1\7"+
    "\1\0\1\43\1\11\1\5\1\35\1\36\1\37\1\46\1\57\1\40"+
    "\1\1\1\53\1\10\1\47\1\42\1\51\1\52\1\63\1\50\1\44"+
    "\1\60\1\13\1\62\1\56\1\12\1\61\1\55\1\0\1\31\1\0"+
    "\1\25\6\15\1\71\32\15\2\0\4\14\4\0\1\14\2\0\1\15"+
    "\7\0\1\14\4\0\1\14\5\0\27\14\1\0\37\14\1\0\70\14"+
    "\2\41\115\14\1\45\u0142\14\4\0\14\14\16\0\5\14\7\0\1\14"+
    "\1\0\1\14\21\0\160\15\5\14\1\0\2\14\2\0\4\14\1\0"+
    "\1\14\6\0\1\14\1\0\3\14\1\0\1\14\1\0\24\14\1\0"+
    "\123\14\1\0\213\14\1\0\5\15\2\0\246\14\1\0\46\14\2\0"+
    "\1\14\7\0\47\14\7\0\1\14\1\0\55\15\1\0\1\15\1\0"+
    "\2\15\1\0\2\15\1\0\1\15\10\0\33\14\5\0\3\14\15\0"+
    "\6\15\5\0\1\14\4\0\13\15\1\0\1\15\3\0\53\14\37\15"+
    "\4\0\2\14\1\15\143\14\1\0\1\14\10\15\1\0\6\15\2\14"+
    "\2\15\1\0\4\15\2\14\12\15\3\14\2\0\1\14\17\0\1\15"+
    "\1\14\1\15\36\14\33\15\2\0\131\14\13\15\1\14\16\0\12\15"+
    "\41\14\11\15\2\14\4\0\1\14\5\0\26\14\4\15\1\14\11\15"+
    "\1\14\3\15\1\14\5\15\22\0\31\14\3\15\4\0\13\14\65\0"+
    "\25\14\1\0\10\14\26\0\60\15\66\14\3\15\1\14\22\15\1\14"+
    "\7\15\12\14\2\15\2\0\12\15\1\0\20\14\3\15\1\0\10\14"+
    "\2\0\2\14\2\0\26\14\1\0\7\14\1\0\1\14\3\0\4\14"+
    "\2\0\1\15\1\14\7\15\2\0\2\15\2\0\3\15\1\14\10\0"+
    "\1\15\4\0\2\14\1\0\3\14\2\15\2\0\12\15\4\14\7\0"+
    "\2\14\4\0\3\15\1\0\6\14\4\0\2\14\2\0\26\14\1\0"+
    "\7\14\1\0\2\14\1\0\2\14\1\0\2\14\2\0\1\15\1\0"+
    "\5\15\4\0\2\15\2\0\3\15\3\0\1\15\7\0\4\14\1\0"+
    "\1\14\7\0\14\15\3\14\1\15\13\0\3\15\1\0\11\14\1\0"+
    "\3\14\1\0\26\14\1\0\7\14\1\0\2\14\1\0\5\14\2\0"+
    "\1\15\1\14\10\15\1\0\3\15\1\0\3\15\2\0\1\14\17\0"+
    "\2\14\2\15\2\0\12\15\1\0\1\14\7\0\1\14\6\15\1\0"+
    "\3\15\1\0\10\14\2\0\2\14\2\0\26\14\1\0\7\14\1\0"+
    "\2\14\1\0\5\14\2\0\1\15\1\14\7\15\2\0\2\15\2\0"+
    "\3\15\10\0\2\15\4\0\2\14\1\0\3\14\2\15\2\0\12\15"+
    "\1\0\1\14\20\0\1\15\1\14\1\0\6\14\3\0\3\14\1\0"+
    "\4\14\3\0\2\14\1\0\1\14\1\0\2\14\3\0\2\14\3\0"+
    "\3\14\3\0\14\14\4\0\5\15\3\0\3\15\1\0\4\15\2\0"+
    "\1\14\6\0\1\15\16\0\12\15\11\0\1\14\6\0\4\15\1\0"+
    "\10\14\1\0\3\14\1\0\27\14\1\0\20\14\3\0\1\14\7\15"+
    "\1\0\3\15\1\0\4\15\7\0\2\15\1\0\3\14\5\0\2\14"+
    "\2\15\2\0\12\15\20\0\1\14\3\15\1\0\10\14\1\0\3\14"+
    "\1\0\27\14\1\0\12\14\1\0\5\14\2\0\1\15\1\14\7\15"+
    "\1\0\3\15\1\0\4\15\7\0\2\15\7\0\1\14\1\0\2\14"+
    "\2\15\2\0\12\15\1\0\2\14\15\0\4\15\1\0\10\14\1\0"+
    "\3\14\1\0\51\14\2\15\1\14\7\15\1\0\3\15\1\0\4\15"+
    "\1\14\5\0\3\14\1\15\7\0\3\14\2\15\2\0\12\15\12\0"+
    "\6\14\2\0\2\15\1\0\22\14\3\0\30\14\1\0\11\14\1\0"+
    "\1\14\2\0\7\14\3\0\1\15\4\0\6\15\1\0\1\15\1\0"+
    "\10\15\6\0\12\15\2\0\2\15\15\0\60\14\1\15\2\14\7\15"+
    "\4\0\10\14\10\15\1\0\12\15\47\0\2\14\1\0\1\14\2\0"+
    "\2\14\1\0\1\14\2\0\1\14\6\0\4\14\1\0\7\14\1\0"+
    "\3\14\1\0\1\14\1\0\1\14\2\0\2\14\1\0\4\14\1\15"+
    "\2\14\6\15\1\0\2\15\1\14\2\0\5\14\1\0\1\14\1\0"+
    "\6\15\2\0\12\15\2\0\4\14\40\0\1\14\27\0\2\15\6\0"+
    "\12\15\13\0\1\15\1\0\1\15\1\0\1\15\4\0\2\15\10\14"+
    "\1\0\44\14\4\0\24\15\1\0\2\15\5\14\13\15\1\0\44\15"+
    "\11\0\1\15\71\0\53\14\24\15\1\14\12\15\6\0\6\14\4\15"+
    "\4\14\3\15\1\14\3\15\2\14\7\15\3\14\4\15\15\14\14\15"+
    "\1\14\17\15\2\0\46\14\1\0\1\14\5\0\1\14\2\0\53\14"+
    "\1\0\u014d\14\1\0\4\14\2\0\7\14\1\0\1\14\1\0\4\14"+
    "\2\0\51\14\1\0\4\14\2\0\41\14\1\0\4\14\2\0\7\14"+
    "\1\0\1\14\1\0\4\14\2\0\17\14\1\0\71\14\1\0\4\14"+
    "\2\0\103\14\2\0\3\15\40\0\20\14\20\0\126\14\2\0\6\14"+
    "\3\0\u026c\14\2\0\21\14\1\0\32\14\5\0\113\14\3\0\13\14"+
    "\7\0\15\14\1\0\4\14\3\15\13\0\22\14\3\15\13\0\22\14"+
    "\2\15\14\0\15\14\1\0\3\14\1\0\2\15\14\0\64\14\40\15"+
    "\3\0\1\14\3\0\2\14\1\15\2\0\12\15\41\0\4\15\1\0"+
    "\12\15\6\0\130\14\10\0\5\14\2\15\42\14\1\15\1\14\5\0"+
    "\106\14\12\0\37\14\1\0\14\15\4\0\14\15\12\0\12\15\36\14"+
    "\2\0\5\14\13\0\54\14\4\0\32\14\6\0\12\15\46\0\27\14"+
    "\5\15\4\0\65\14\12\15\1\0\35\15\2\0\13\15\6\0\12\15"+
    "\15\0\1\14\10\0\16\15\102\0\5\15\57\14\21\15\7\14\4\0"+
    "\12\15\21\0\11\15\14\0\3\15\36\14\15\15\2\14\12\15\54\14"+
    "\16\15\14\0\44\14\24\15\10\0\12\15\3\0\3\14\12\15\44\14"+
    "\2\0\11\14\107\0\3\15\1\0\25\15\4\14\1\15\4\14\3\15"+
    "\2\14\3\15\6\0\300\14\72\15\1\0\5\15\u0116\14\2\0\6\14"+
    "\2\0\46\14\2\0\6\14\2\0\10\14\1\0\1\14\1\0\1\14"+
    "\1\0\1\14\1\0\37\14\2\0\65\14\1\0\7\14\1\0\1\14"+
    "\3\0\3\14\1\0\7\14\3\0\4\14\2\0\6\14\4\0\15\14"+
    "\5\0\3\14\1\0\7\14\16\0\5\15\30\0\1\67\1\67\5\15"+
    "\20\0\2\14\23\0\1\14\13\0\5\15\1\0\12\15\1\0\1\14"+
    "\15\0\1\14\20\0\15\14\3\0\40\14\20\0\15\15\4\0\1\15"+
    "\3\0\14\15\21\0\1\14\4\0\1\14\2\0\12\14\1\0\1\14"+
    "\3\0\5\14\6\0\1\14\1\0\1\14\1\0\1\14\1\0\1\54"+
    "\3\14\1\0\13\14\2\0\4\14\5\0\5\14\4\0\1\14\21\0"+
    "\51\14\u0a77\0\57\14\1\0\57\14\1\0\205\14\6\0\4\14\3\15"+
    "\2\14\14\0\46\14\1\0\1\14\5\0\1\14\2\0\70\14\7\0"+
    "\1\14\17\0\1\15\27\14\11\0\7\14\1\0\7\14\1\0\7\14"+
    "\1\0\7\14\1\0\7\14\1\0\7\14\1\0\7\14\1\0\7\14"+
    "\1\0\40\15\57\0\1\14\u01d5\0\3\14\31\0\11\14\6\15\1\0"+
    "\5\14\2\0\5\14\4\0\126\14\2\0\2\15\2\0\3\14\1\0"+
    "\132\14\1\0\4\14\5\0\52\14\2\0\136\14\21\0\33\14\65\0"+
    "\20\14\u0200\0\u19b6\14\112\0\u51eb\14\25\0\u048d\14\103\0\56\14\2\0"+
    "\u010d\14\3\0\20\14\12\15\2\14\24\0\57\14\1\15\4\0\12\15"+
    "\1\0\37\14\2\15\120\14\2\15\45\0\11\14\2\0\147\14\2\0"+
    "\44\14\1\0\10\14\77\0\13\14\1\15\3\14\1\15\4\14\1\15"+
    "\27\14\5\15\20\0\1\14\7\0\64\14\14\0\2\15\62\14\22\15"+
    "\12\0\12\15\6\0\22\15\6\14\3\0\1\14\1\0\1\14\2\0"+
    "\12\15\34\14\10\15\2\0\27\14\15\15\14\0\35\14\3\0\4\15"+
    "\57\14\16\15\16\0\1\14\12\15\6\0\5\14\1\15\12\14\12\15"+
    "\5\14\1\0\51\14\16\15\11\0\3\14\1\15\10\14\2\15\2\0"+
    "\12\15\6\0\27\14\3\0\1\14\3\15\62\14\1\15\1\14\3\15"+
    "\2\14\2\15\5\14\2\15\1\14\1\15\1\14\30\0\3\14\2\0"+
    "\13\14\5\15\2\0\3\14\2\15\12\0\6\14\2\0\6\14\2\0"+
    "\6\14\11\0\7\14\1\0\7\14\1\0\53\14\1\0\12\14\12\0"+
    "\163\14\10\15\1\0\2\15\2\0\12\15\6\0\u2ba4\14\14\0\27\14"+
    "\4\0\61\14\u2104\0\u016e\14\2\0\152\14\46\0\7\14\14\0\5\14"+
    "\5\0\1\14\1\15\12\14\1\0\15\14\1\0\5\14\1\0\1\14"+
    "\1\0\2\14\1\0\2\14\1\0\154\14\41\0\u016b\14\22\0\100\14"+
    "\2\0\66\14\50\0\15\14\3\0\20\15\20\0\20\15\3\0\2\14"+
    "\30\0\3\14\31\0\1\14\6\0\5\14\1\0\207\14\2\0\1\15"+
    "\4\0\1\14\13\0\12\15\7\0\32\14\4\0\1\14\1\0\32\14"+
    "\13\0\131\14\3\0\6\14\2\0\6\14\2\0\6\14\2\0\3\14"+
    "\3\0\2\14\3\0\2\14\22\0\3\15\4\0\14\14\1\0\32\14"+
    "\1\0\23\14\1\0\2\14\1\0\17\14\2\0\16\14\42\0\173\14"+
    "\105\0\65\14\210\0\1\15\202\0\35\14\3\0\61\14\17\0\1\15"+
    "\37\0\40\14\15\0\36\14\5\0\46\14\5\15\5\0\36\14\2\0"+
    "\44\14\4\0\10\14\1\0\5\14\52\0\236\14\2\0\12\15\6\0"+
    "\44\14\4\0\44\14\4\0\50\14\10\0\64\14\234\0\u0137\14\11\0"+
    "\26\14\12\0\10\14\230\0\6\14\2\0\1\14\1\0\54\14\1\0"+
    "\2\14\3\0\1\14\2\0\27\14\12\0\27\14\11\0\37\14\101\0"+
    "\23\14\1\0\2\14\12\0\26\14\12\0\32\14\106\0\70\14\6\0"+
    "\2\14\100\0\1\14\3\15\1\0\2\15\5\0\4\15\4\14\1\0"+
    "\3\14\1\0\33\14\4\0\3\15\4\0\1\15\40\0\35\14\3\0"+
    "\35\14\43\0\10\14\1\0\34\14\2\15\31\0\66\14\12\0\26\14"+
    "\12\0\23\14\15\0\22\14\156\0\111\14\67\0\63\14\15\0\63\14"+
    "\u030d\0\3\15\65\14\17\15\37\0\12\15\17\0\4\15\55\14\13\15"+
    "\2\0\1\15\22\0\31\14\7\0\12\15\6\0\3\15\44\14\16\15"+
    "\1\0\12\15\20\0\43\14\1\15\2\0\1\14\11\0\3\15\60\14"+
    "\16\15\4\14\5\0\3\15\3\0\12\15\1\14\1\0\1\14\43\0"+
    "\22\14\1\0\31\14\14\15\6\0\1\15\101\0\7\14\1\0\1\14"+
    "\1\0\4\14\1\0\17\14\1\0\12\14\7\0\57\14\14\15\5\0"+
    "\12\15\6\0\4\15\1\0\10\14\2\0\2\14\2\0\26\14\1\0"+
    "\7\14\1\0\2\14\1\0\5\14\2\0\1\15\1\14\7\15\2\0"+
    "\2\15\2\0\3\15\2\0\1\14\6\0\1\15\5\0\5\14\2\15"+
    "\2\0\7\15\3\0\5\15\213\0\65\14\22\15\4\14\5\0\12\15"+
    "\46\0\60\14\24\15\2\14\1\0\1\14\10\0\12\15\246\0\57\14"+
    "\7\15\2\0\11\15\27\0\4\14\2\15\42\0\60\14\21\15\3\0"+
    "\1\14\13\0\12\15\46\0\53\14\15\15\10\0\12\15\66\0\32\14"+
    "\3\0\17\15\4\0\12\15\u0166\0\100\14\12\15\25\0\1\14\u0100\0"+
    "\1\14\12\15\50\14\7\15\1\14\4\15\10\0\1\15\10\0\1\14"+
    "\13\15\50\14\2\0\4\14\20\15\46\0\71\14\u0107\0\11\14\1\0"+
    "\45\14\10\15\1\0\10\15\1\14\17\0\12\15\30\0\36\14\2\0"+
    "\26\15\1\0\16\15\111\0\7\14\1\0\2\14\1\0\46\14\6\15"+
    "\3\0\1\15\1\0\2\15\1\0\7\15\1\14\1\15\10\0\12\15"+
    "\u02a6\0\u039a\14\146\0\157\14\21\0\304\14\u0abc\0\u042f\14\u0fd1\0\u0247\14"+
    "\u21b9\0\u0239\14\7\0\37\14\1\0\12\15\146\0\36\14\2\0\5\15"+
    "\13\0\60\14\7\15\11\0\4\14\14\0\12\15\11\0\25\14\5\0"+
    "\23\14\u0370\0\105\14\13\0\1\14\56\15\20\0\4\15\15\14\100\0"+
    "\2\14\36\0\u17ed\14\23\0\u02f3\14\u250d\0\u011f\14\121\0\u018c\14\u0904\0"+
    "\153\14\5\0\15\14\3\0\11\14\7\0\12\14\3\0\2\15\1\0"+
    "\4\15\u14c1\0\5\15\3\0\26\15\2\0\7\15\36\0\4\15\224\0"+
    "\3\15\u01bb\0\125\14\1\0\107\14\1\0\2\14\2\0\1\14\2\0"+
    "\2\14\2\0\4\14\1\0\14\14\1\0\1\14\1\0\7\14\1\0"+
    "\101\14\1\0\4\14\2\0\10\14\1\0\7\14\1\0\34\14\1\0"+
    "\4\14\1\0\5\14\1\0\1\14\3\0\7\14\1\0\u0154\14\2\0"+
    "\31\14\1\0\31\14\1\0\37\14\1\0\31\14\1\0\37\14\1\0"+
    "\31\14\1\0\37\14\1\0\31\14\1\0\37\14\1\0\31\14\1\0"+
    "\10\14\2\0\62\15\u0200\0\67\15\4\0\62\15\10\0\1\15\16\0"+
    "\1\15\26\0\5\15\1\0\17\15\u0550\0\7\15\1\0\21\15\2\0"+
    "\7\15\1\0\2\15\1\0\5\15\u07d5\0\305\14\13\0\7\15\51\0"+
    "\104\14\7\15\5\0\12\15\u04a6\0\4\14\1\0\33\14\1\0\2\14"+
    "\1\0\1\14\2\0\1\14\1\0\12\14\1\0\4\14\1\0\1\14"+
    "\1\0\1\14\6\0\1\14\4\0\1\14\1\0\1\14\1\0\1\14"+
    "\1\0\3\14\1\0\2\14\1\0\1\14\2\0\1\14\1\0\1\14"+
    "\1\0\1\14\1\0\1\14\1\0\1\14\1\0\2\14\1\0\1\14"+
    "\2\0\4\14\1\0\7\14\1\0\4\14\1\0\4\14\1\0\1\14"+
    "\1\0\12\14\1\0\21\14\5\0\3\14\1\0\5\14\1\0\21\14"+
    "\u1144\0\ua6d7\14\51\0\u1035\14\13\0\336\14\2\0\u1682\14\16\0\u1d31\14"+
    "\u0c1f\0\u021e\14\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\15\36\0\140\15\200\0\360\15\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\2\3\6\4\1\5\1\6\1\7"+
    "\1\10\1\11\6\12\2\1\23\4\1\0\1\13\1\4"+
    "\1\2\2\0\1\3\1\14\3\0\3\4\1\2\1\4"+
    "\1\2\5\4\1\15\1\16\15\0\3\4\1\17\12\4"+
    "\1\2\1\4\1\17\1\4\1\2\2\4\1\2\4\4"+
    "\1\2\5\4\2\17\1\0\1\2\1\14\1\3\1\14"+
    "\2\20\4\4\5\0\1\21\16\0\1\2\3\4\2\2"+
    "\2\4\2\2\11\4\3\0\1\22\4\0\1\21\11\0"+
    "\7\4\4\0\1\21\7\0\2\4\1\22\2\4\4\0"+
    "\1\21\1\0\10\4";

  private static int [] zzUnpackAction() {
    int [] result = new int[221];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\72\0\164\0\256\0\350\0\u0122\0\u015c"+
    "\0\u0196\0\u01d0\0\u020a\0\u0244\0\u027e\0\u02b8\0\u02f2\0\72"+
    "\0\u032c\0\72\0\u0366\0\u03a0\0\u03da\0\u0414\0\u044e\0\u044e"+
    "\0\u0488\0\u04c2\0\u04fc\0\u0536\0\u0570\0\u05aa\0\u05e4\0\u061e"+
    "\0\u0658\0\u0692\0\u06cc\0\u0706\0\u0740\0\u077a\0\u07b4\0\u07ee"+
    "\0\u0828\0\u0862\0\u089c\0\u08d6\0\u0910\0\72\0\u094a\0\u015c"+
    "\0\u0984\0\u09be\0\u0984\0\u09f8\0\u0a32\0\u0a6c\0\u0aa6\0\u0ae0"+
    "\0\u0b1a\0\u0b54\0\u0b8e\0\u0bc8\0\u0c02\0\u0c3c\0\u0c76\0\u0cb0"+
    "\0\u0cea\0\u0d24\0\72\0\72\0\u0d5e\0\u0d98\0\u0dd2\0\u0e0c"+
    "\0\u0e46\0\u0e80\0\u0eba\0\u0ef4\0\u0f2e\0\u0f68\0\u0fa2\0\u0fdc"+
    "\0\u1016\0\u1050\0\u108a\0\u10c4\0\u015c\0\u10fe\0\u1138\0\u1172"+
    "\0\u11ac\0\u11e6\0\u1220\0\u125a\0\u1294\0\u12ce\0\u1308\0\u1342"+
    "\0\u137c\0\u0244\0\u13b6\0\u0244\0\u13f0\0\u142a\0\u1464\0\u149e"+
    "\0\u14d8\0\u1512\0\u154c\0\u1586\0\u15c0\0\u15fa\0\u1634\0\u166e"+
    "\0\u16a8\0\u16e2\0\u15fa\0\u171c\0\u1172\0\u0984\0\u1756\0\u1790"+
    "\0\u015c\0\u0244\0\u17ca\0\u1804\0\u183e\0\u1878\0\u18b2\0\u18ec"+
    "\0\u1926\0\u1960\0\u199a\0\72\0\u19d4\0\u1a0e\0\u1a48\0\u1a82"+
    "\0\u1abc\0\u1af6\0\u1b30\0\u1b6a\0\u1ba4\0\u1bde\0\u1c18\0\u1c52"+
    "\0\u1c8c\0\u1cc6\0\u1d00\0\u1d3a\0\u1d74\0\u1dae\0\u1de8\0\u1e22"+
    "\0\u1e5c\0\u1e96\0\u1ed0\0\u1f0a\0\u1f44\0\u1f7e\0\u1fb8\0\u1586"+
    "\0\u1ff2\0\u202c\0\u2066\0\u20a0\0\u20da\0\u2114\0\u1756\0\u214e"+
    "\0\u015c\0\u2188\0\u21c2\0\u21fc\0\u2236\0\u2270\0\u22aa\0\u22e4"+
    "\0\u231e\0\u2358\0\u2392\0\u23cc\0\u2406\0\u2440\0\u247a\0\u24b4"+
    "\0\u24ee\0\u2528\0\u2562\0\u259c\0\u25d6\0\u2610\0\u264a\0\u2684"+
    "\0\u26be\0\u26f8\0\u2732\0\u276c\0\u27a6\0\u27e0\0\u281a\0\u2854"+
    "\0\u288e\0\u28c8\0\u2902\0\u293c\0\u0244\0\u2976\0\u29b0\0\u29ea"+
    "\0\u2270\0\u2a24\0\u2a5e\0\u2a98\0\u2ad2\0\u2b0c\0\u2b46\0\u2b80"+
    "\0\u2bba\0\u2bf4\0\u2c2e\0\u2c68\0\u2ca2";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[221];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\5\1\7\1\5\1\10"+
    "\1\11\1\12\1\13\1\10\1\14\2\3\1\15\1\16"+
    "\1\17\1\20\1\21\2\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\10\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\10\1\51\1\10\1\52\1\10"+
    "\1\53\1\10\2\5\1\54\1\0\1\21\74\0\13\10"+
    "\2\14\1\55\5\0\1\56\10\0\4\10\1\14\1\10"+
    "\1\57\1\10\1\14\2\10\1\60\3\10\1\14\11\10"+
    "\1\14\2\0\1\14\1\0\1\61\3\5\1\61\1\5"+
    "\1\62\1\63\3\61\10\0\1\56\10\0\4\61\1\0"+
    "\3\61\1\0\6\61\1\0\7\61\2\5\5\0\2\61"+
    "\2\64\1\61\1\64\1\65\1\63\1\66\1\67\1\61"+
    "\10\0\1\56\10\0\4\61\1\0\3\61\1\0\6\61"+
    "\1\0\7\61\2\64\5\0\13\10\2\14\1\55\5\0"+
    "\1\56\10\0\4\10\1\14\3\10\1\14\3\10\1\70"+
    "\2\10\1\14\2\10\1\71\6\10\1\14\2\0\1\14"+
    "\1\0\13\10\2\14\1\55\5\0\1\56\10\0\4\10"+
    "\1\14\3\10\1\14\6\10\1\14\11\10\1\14\2\0"+
    "\1\14\1\0\7\10\1\72\1\73\2\10\2\14\1\55"+
    "\5\0\1\56\10\0\4\10\1\14\3\10\1\14\3\10"+
    "\1\74\2\10\1\14\1\10\1\60\1\75\6\10\1\14"+
    "\2\0\1\14\1\0\7\10\1\76\3\10\2\14\1\55"+
    "\5\0\1\56\10\0\1\10\1\77\2\10\1\14\1\100"+
    "\2\10\1\14\1\101\5\10\1\14\4\10\1\102\4\10"+
    "\1\14\2\0\1\14\1\0\13\10\2\14\1\55\5\0"+
    "\1\56\10\0\4\10\1\14\3\10\1\14\3\10\1\45"+
    "\2\10\1\14\11\10\1\14\2\0\1\14\1\0\15\14"+
    "\1\55\16\0\32\14\2\0\1\14\17\15\1\103\52\15"+
    "\20\16\1\104\51\16\22\17\1\0\44\17\26\0\1\21"+
    "\44\0\1\21\27\0\1\22\72\0\1\22\3\0\1\22"+
    "\66\0\1\22\2\0\1\22\67\0\1\22\73\0\1\22"+
    "\46\0\1\105\1\106\1\0\1\107\21\0\1\110\1\111"+
    "\1\0\2\112\1\0\1\113\2\114\1\115\1\116\1\117"+
    "\1\120\4\0\1\121\14\0\13\10\2\14\1\55\5\0"+
    "\1\56\10\0\3\10\1\122\1\123\3\10\1\14\6\10"+
    "\1\14\11\10\1\14\2\0\1\14\1\0\13\10\2\14"+
    "\1\55\5\0\1\56\10\0\4\10\1\14\1\10\1\124"+
    "\1\10\1\14\4\10\1\125\1\10\1\14\11\10\1\14"+
    "\2\0\1\14\1\0\13\10\2\14\1\55\5\0\1\56"+
    "\10\0\4\10\1\14\1\126\2\10\1\14\6\10\1\14"+
    "\11\10\1\14\2\0\1\14\1\0\15\14\1\55\16\0"+
    "\5\14\1\127\24\14\2\0\1\14\1\0\13\10\2\14"+
    "\1\55\5\0\1\56\10\0\4\10\1\14\3\10\1\14"+
    "\3\10\1\130\2\10\1\14\11\10\1\14\2\0\1\14"+
    "\1\0\2\10\2\125\7\10\2\14\1\55\5\0\1\56"+
    "\10\0\1\131\3\10\1\14\1\132\2\10\1\14\6\10"+
    "\1\14\3\10\1\125\3\10\2\125\1\14\2\0\1\14"+
    "\1\0\2\10\2\125\1\10\1\125\1\10\1\133\1\60"+
    "\1\10\1\134\2\14\1\55\5\0\1\56\10\0\3\10"+
    "\1\135\1\136\3\10\1\14\2\10\1\137\1\10\1\125"+
    "\1\10\1\14\1\10\1\60\1\140\3\10\1\141\2\125"+
    "\1\14\2\0\1\14\1\0\2\14\2\142\1\14\1\142"+
    "\1\14\1\143\1\144\1\14\1\145\2\14\1\55\16\0"+
    "\3\14\2\136\6\14\1\146\1\14\1\142\3\14\1\144"+
    "\1\147\3\14\1\150\2\142\1\14\2\0\1\14\1\0"+
    "\13\10\2\14\1\55\5\0\1\56\10\0\4\10\1\14"+
    "\3\10\1\14\4\10\1\125\1\10\1\14\11\10\1\14"+
    "\2\0\1\14\1\0\12\10\1\151\2\14\1\55\5\0"+
    "\1\56\10\0\2\10\1\152\1\10\1\14\3\10\1\14"+
    "\6\10\1\14\3\10\1\153\5\10\1\14\2\0\1\14"+
    "\1\0\13\10\2\14\1\55\5\0\1\56\10\0\4\10"+
    "\1\14\1\10\1\125\1\10\1\14\6\10\1\14\11\10"+
    "\1\14\2\0\1\14\1\0\13\10\2\14\1\55\5\0"+
    "\1\56\10\0\4\10\1\14\3\10\1\14\2\10\1\154"+
    "\3\10\1\14\11\10\1\14\2\0\1\14\1\0\13\10"+
    "\2\14\1\55\5\0\1\56\10\0\3\10\1\125\1\142"+
    "\3\10\1\14\3\10\1\155\2\10\1\14\11\10\1\14"+
    "\2\0\1\14\1\0\3\10\1\125\7\10\2\14\1\55"+
    "\5\0\1\56\10\0\4\10\1\14\3\10\1\14\6\10"+
    "\1\14\3\10\1\53\5\10\1\14\2\0\1\14\1\0"+
    "\3\14\1\142\11\14\1\55\16\0\23\14\1\156\6\14"+
    "\2\0\1\14\1\0\13\10\2\14\1\55\5\0\1\56"+
    "\10\0\4\10\1\14\3\10\1\14\3\10\1\157\2\10"+
    "\1\14\11\10\1\14\2\0\1\14\1\0\1\10\3\125"+
    "\1\10\1\125\5\10\2\14\1\55\5\0\1\56\10\0"+
    "\4\10\1\14\1\10\1\135\1\10\1\14\2\10\1\160"+
    "\1\161\2\10\1\14\7\10\2\125\1\14\2\0\1\14"+
    "\1\0\2\10\2\125\7\10\2\14\1\55\5\0\1\56"+
    "\10\0\4\10\1\14\3\10\1\14\6\10\1\14\11\10"+
    "\1\14\2\0\1\14\1\0\1\14\2\142\1\162\1\14"+
    "\1\142\7\14\1\55\16\0\27\14\1\162\1\163\1\14"+
    "\2\0\1\14\13\0\1\164\57\0\7\10\1\165\3\10"+
    "\2\14\1\55\5\0\1\56\10\0\4\10\1\14\3\10"+
    "\1\14\6\10\1\14\11\10\1\14\2\0\1\14\1\0"+
    "\13\61\10\0\1\56\10\0\4\61\1\0\3\61\1\0"+
    "\6\61\1\0\11\61\5\0\1\61\3\5\1\61\1\5"+
    "\1\62\4\61\10\0\1\56\10\0\4\61\1\0\3\61"+
    "\1\0\6\61\1\0\7\61\2\5\5\0\2\61\2\64"+
    "\1\61\1\64\1\65\1\166\3\61\10\0\1\56\10\0"+
    "\4\61\1\0\3\61\1\0\6\61\1\0\7\61\2\64"+
    "\5\0\2\61\2\64\1\61\1\64\1\65\4\61\10\0"+
    "\1\56\10\0\4\61\1\0\3\61\1\0\6\61\1\0"+
    "\7\61\2\64\5\0\2\61\2\167\7\61\10\0\1\56"+
    "\10\0\4\61\1\0\3\61\1\0\6\61\1\0\11\61"+
    "\5\0\1\61\5\170\2\61\1\170\2\61\10\0\1\56"+
    "\10\0\3\170\1\61\1\0\1\61\1\170\1\61\1\0"+
    "\6\61\1\0\7\61\2\170\5\0\13\10\2\14\1\55"+
    "\5\0\1\56\10\0\4\10\1\14\2\10\1\171\1\172"+
    "\6\10\1\14\11\10\1\14\2\0\1\14\1\0\13\10"+
    "\2\14\1\55\5\0\1\56\10\0\4\10\1\14\1\10"+
    "\1\173\1\10\1\14\6\10\1\14\11\10\1\14\2\0"+
    "\1\14\1\0\13\10\2\14\1\55\5\0\1\56\10\0"+
    "\4\10\1\14\3\10\1\14\3\10\1\60\2\10\1\14"+
    "\11\10\1\14\2\0\1\14\1\0\12\10\1\60\2\14"+
    "\1\55\5\0\1\56\10\0\4\10\1\14\3\10\1\14"+
    "\6\10\1\14\11\10\1\14\2\0\1\14\1\0\13\10"+
    "\2\14\1\55\5\0\1\56\10\0\4\10\1\14\1\174"+
    "\2\10\1\14\6\10\1\14\11\10\1\14\2\0\1\14"+
    "\1\0\12\10\1\60\2\14\1\55\5\0\1\56\10\0"+
    "\3\10\1\60\1\144\3\10\1\14\6\10\1\14\11\10"+
    "\1\14\2\0\1\14\1\0\13\10\2\14\1\55\5\0"+
    "\1\56\10\0\1\10\1\175\2\10\1\14\3\10\1\14"+
    "\6\10\1\14\11\10\1\14\2\0\1\14\1\0\13\10"+
    "\2\14\1\55\5\0\1\56\10\0\4\10\1\14\3\10"+
    "\1\14\6\10\1\14\6\10\1\60\2\10\1\14\2\0"+
    "\1\14\1\0\13\10\2\14\1\55\5\0\1\56\10\0"+
    "\1\10\1\60\2\10\1\14\3\10\1\14\6\10\1\14"+
    "\11\10\1\14\2\0\1\14\1\0\13\10\2\14\1\55"+
    "\5\0\1\56\10\0\4\10\1\14\3\10\1\14\6\10"+
    "\1\14\3\10\1\175\5\10\1\14\2\0\1\14\1\0"+
    "\13\10\2\14\1\55\5\0\1\56\10\0\4\10\1\14"+
    "\3\10\1\14\6\10\1\14\3\10\1\176\5\10\1\14"+
    "\2\0\1\14\51\0\1\177\25\0\1\200\42\0\1\201"+
    "\10\0\1\202\52\0\1\203\40\0\1\204\24\0\1\205"+
    "\43\0\1\206\31\0\1\207\4\0\1\210\61\0\1\204"+
    "\2\0\1\211\37\0\1\212\33\0\2\213\76\0\1\214"+
    "\4\0\1\215\22\0\1\216\124\0\1\217\3\0\1\210"+
    "\60\0\1\220\103\0\1\221\70\0\1\210\1\0\1\222"+
    "\21\0\13\10\2\14\1\55\5\0\1\56\10\0\4\10"+
    "\1\14\3\10\1\14\6\10\1\14\5\10\1\73\3\10"+
    "\1\14\2\0\1\14\1\0\15\14\1\55\16\0\25\14"+
    "\1\223\4\14\2\0\1\14\1\0\7\10\1\224\3\10"+
    "\2\14\1\55\5\0\1\56\10\0\4\10\1\14\3\10"+
    "\1\14\6\10\1\14\11\10\1\14\2\0\1\14\1\0"+
    "\13\10\2\14\1\55\5\0\1\56\10\0\4\10\1\14"+
    "\3\10\1\14\6\10\1\14\3\10\1\225\5\10\1\14"+
    "\2\0\1\14\1\0\15\14\1\55\16\0\23\14\1\226"+
    "\6\14\2\0\1\14\1\0\13\10\2\14\1\55\5\0"+
    "\1\56\10\0\4\10\1\14\3\10\1\14\2\10\1\60"+
    "\3\10\1\14\11\10\1\14\2\0\1\14\1\0\13\10"+
    "\2\14\1\55\5\0\1\56\10\0\1\227\3\10\1\14"+
    "\3\10\1\14\6\10\1\14\11\10\1\14\2\0\1\14"+
    "\1\0\13\10\2\14\1\55\5\0\1\56\10\0\1\154"+
    "\3\10\1\14\3\10\1\14\6\10\1\14\11\10\1\14"+
    "\2\0\1\14\1\0\7\10\1\230\3\10\2\14\1\55"+
    "\5\0\1\56\10\0\4\10\1\14\3\10\1\14\6\10"+
    "\1\14\3\10\1\227\5\10\1\14\2\0\1\14\1\0"+
    "\10\10\1\73\2\10\2\14\1\55\5\0\1\56\10\0"+
    "\4\10\1\14\3\10\1\14\6\10\1\14\11\10\1\14"+
    "\2\0\1\14\1\0\13\10\2\14\1\55\5\0\1\56"+
    "\10\0\4\10\1\14\1\171\2\10\1\14\6\10\1\14"+
    "\11\10\1\14\2\0\1\14\1\0\15\14\1\55\16\0"+
    "\5\14\1\172\24\14\2\0\1\14\1\0\7\10\1\230"+
    "\3\10\2\14\1\55\5\0\1\56\10\0\4\10\1\14"+
    "\1\10\1\230\1\10\1\14\6\10\1\14\11\10\1\14"+
    "\2\0\1\14\1\0\13\10\2\14\1\55\5\0\1\56"+
    "\10\0\4\10\1\14\3\10\1\14\3\10\1\231\2\10"+
    "\1\14\11\10\1\14\2\0\1\14\1\0\13\10\2\14"+
    "\1\55\5\0\1\56\10\0\4\10\1\14\3\10\1\14"+
    "\2\10\1\232\3\10\1\14\11\10\1\14\2\0\1\14"+
    "\1\0\7\14\1\233\5\14\1\55\16\0\23\14\1\234"+
    "\6\14\2\0\1\14\1\0\10\14\1\223\4\14\1\55"+
    "\16\0\32\14\2\0\1\14\1\0\7\14\1\233\5\14"+
    "\1\55\16\0\6\14\1\233\23\14\2\0\1\14\1\0"+
    "\15\14\1\55\16\0\14\14\1\235\15\14\2\0\1\14"+
    "\1\0\15\14\1\55\16\0\13\14\1\236\16\14\2\0"+
    "\1\14\1\0\7\10\1\237\3\10\2\14\1\55\5\0"+
    "\1\56\10\0\4\10\1\14\3\10\1\14\6\10\1\14"+
    "\11\10\1\14\2\0\1\14\1\0\7\10\1\72\3\10"+
    "\2\14\1\55\5\0\1\56\10\0\4\10\1\14\3\10"+
    "\1\14\6\10\1\14\2\10\1\240\6\10\1\14\2\0"+
    "\1\14\1\0\13\10\2\14\1\55\5\0\1\56\10\0"+
    "\4\10\1\14\3\10\1\14\6\10\1\14\2\10\1\240"+
    "\6\10\1\14\2\0\1\14\1\0\13\10\2\14\1\55"+
    "\5\0\1\56\10\0\3\10\1\60\1\144\3\10\1\14"+
    "\6\10\1\14\11\10\1\14\2\0\1\14\1\0\13\10"+
    "\2\14\1\55\5\0\1\56\10\0\4\10\1\14\3\10"+
    "\1\14\6\10\1\14\1\10\1\171\7\10\1\14\2\0"+
    "\1\14\1\0\2\14\2\142\11\14\1\55\16\0\32\14"+
    "\2\0\1\14\1\0\13\10\2\14\1\55\5\0\1\56"+
    "\10\0\4\10\1\14\3\10\1\14\2\10\1\241\3\10"+
    "\1\14\11\10\1\14\2\0\1\14\1\0\12\10\1\242"+
    "\2\14\1\55\5\0\1\56\10\0\4\10\1\14\1\10"+
    "\1\243\1\10\1\14\6\10\1\14\11\10\1\14\2\0"+
    "\1\14\1\0\13\10\2\14\1\55\5\0\1\56\10\0"+
    "\1\244\3\10\1\14\3\10\1\14\2\10\1\245\3\10"+
    "\1\14\11\10\1\14\2\0\1\14\1\0\1\14\3\142"+
    "\1\14\1\142\7\14\1\55\16\0\27\14\2\142\1\14"+
    "\2\0\1\14\2\0\5\246\2\0\1\246\23\0\3\246"+
    "\3\0\1\246\20\0\2\246\5\0\2\61\2\167\2\61"+
    "\1\247\4\61\10\0\1\56\10\0\4\61\1\0\3\61"+
    "\1\0\6\61\1\0\11\61\5\0\1\61\5\170\1\250"+
    "\1\166\1\170\2\61\10\0\1\56\10\0\3\170\1\61"+
    "\1\0\1\61\1\170\1\61\1\0\6\61\1\0\7\61"+
    "\2\170\5\0\13\10\2\14\1\55\5\0\1\56\10\0"+
    "\4\10\1\14\3\10\1\14\2\10\1\251\3\10\1\14"+
    "\11\10\1\14\2\0\1\14\1\0\13\10\2\14\1\55"+
    "\5\0\1\56\10\0\4\10\1\14\3\10\1\14\1\251"+
    "\5\10\1\14\11\10\1\14\2\0\1\14\1\0\13\10"+
    "\2\14\1\55\5\0\1\56\10\0\4\10\1\14\3\10"+
    "\1\14\6\10\1\14\1\60\10\10\1\14\2\0\1\14"+
    "\1\0\13\10\2\14\1\55\5\0\1\56\10\0\1\10"+
    "\1\251\2\10\1\14\3\10\1\14\6\10\1\14\11\10"+
    "\1\14\2\0\1\14\42\0\1\221\6\0\1\252\55\0"+
    "\1\204\72\0\1\253\113\0\1\254\46\0\1\255\5\0"+
    "\1\210\65\0\1\256\76\0\2\257\61\0\1\260\100\0"+
    "\2\221\31\0\1\261\124\0\2\262\35\0\1\263\40\0"+
    "\1\204\66\0\1\264\77\0\1\265\71\0\1\266\25\0"+
    "\1\267\123\0\1\204\100\0\1\204\73\0\1\200\22\0"+
    "\12\14\1\144\2\14\1\55\16\0\32\14\2\0\1\14"+
    "\1\0\13\10\2\14\1\55\5\0\1\56\10\0\4\10"+
    "\1\14\2\10\1\242\1\270\6\10\1\14\11\10\1\14"+
    "\2\0\1\14\1\0\13\10\2\14\1\55\5\0\1\56"+
    "\10\0\1\10\1\271\2\10\1\14\3\10\1\14\6\10"+
    "\1\14\11\10\1\14\2\0\1\14\1\0\15\14\1\55"+
    "\16\0\1\14\1\272\30\14\2\0\1\14\1\0\12\10"+
    "\1\60\2\14\1\55\5\0\1\56\10\0\3\10\1\73"+
    "\1\223\3\10\1\14\6\10\1\14\11\10\1\14\2\0"+
    "\1\14\1\0\13\10\2\14\1\55\5\0\1\56\10\0"+
    "\4\10\1\14\3\10\1\14\6\10\1\14\5\10\1\60"+
    "\3\10\1\14\2\0\1\14\1\0\13\10\2\14\1\55"+
    "\5\0\1\56\10\0\4\10\1\14\3\10\1\14\2\10"+
    "\1\273\3\10\1\14\11\10\1\14\2\0\1\14\1\0"+
    "\13\10\2\14\1\55\5\0\1\56\10\0\4\10\1\14"+
    "\3\10\1\14\6\10\1\14\3\10\1\171\5\10\1\14"+
    "\2\0\1\14\1\0\15\14\1\55\16\0\25\14\1\144"+
    "\4\14\2\0\1\14\1\0\12\14\1\144\2\14\1\55"+
    "\16\0\3\14\2\223\25\14\2\0\1\14\1\0\15\14"+
    "\1\55\16\0\13\14\1\274\16\14\2\0\1\14\1\0"+
    "\15\14\1\55\16\0\23\14\1\172\6\14\2\0\1\14"+
    "\1\0\13\10\2\14\1\55\5\0\1\56\10\0\4\10"+
    "\1\14\3\10\1\14\6\10\1\14\3\10\1\73\5\10"+
    "\1\14\2\0\1\14\1\0\13\10\2\14\1\55\5\0"+
    "\1\56\10\0\1\251\3\10\1\14\3\10\1\14\6\10"+
    "\1\14\11\10\1\14\2\0\1\14\1\0\13\10\2\14"+
    "\1\55\5\0\1\56\10\0\1\10\1\125\2\10\1\14"+
    "\3\10\1\14\6\10\1\14\11\10\1\14\2\0\1\14"+
    "\1\0\13\10\2\14\1\55\5\0\1\56\10\0\4\10"+
    "\1\14\3\10\1\14\4\10\1\60\1\10\1\14\11\10"+
    "\1\14\2\0\1\14\1\0\13\10\2\14\1\55\5\0"+
    "\1\56\10\0\1\10\1\275\2\10\1\14\3\10\1\14"+
    "\6\10\1\14\11\10\1\14\2\0\1\14\1\0\13\10"+
    "\2\14\1\55\5\0\1\56\10\0\4\10\1\14\1\10"+
    "\1\276\1\10\1\14\6\10\1\14\11\10\1\14\2\0"+
    "\1\14\2\0\5\277\2\0\1\277\23\0\3\277\3\0"+
    "\1\277\20\0\2\277\5\0\1\61\5\170\1\250\1\61"+
    "\1\170\2\61\10\0\1\56\10\0\3\170\1\61\1\0"+
    "\1\61\1\170\1\61\1\0\6\61\1\0\7\61\2\170"+
    "\56\0\1\204\62\0\1\300\64\0\1\204\71\0\1\301"+
    "\73\0\2\302\66\0\1\303\43\0\1\304\27\0\2\220"+
    "\5\0\1\204\32\0\1\305\127\0\1\306\63\0\2\307"+
    "\35\0\1\254\134\0\1\310\32\0\1\311\130\0\1\312"+
    "\22\0\15\14\1\55\16\0\1\14\1\142\30\14\2\0"+
    "\1\14\1\0\13\10\2\14\1\55\5\0\1\56\10\0"+
    "\4\10\1\14\3\10\1\14\1\313\5\10\1\14\11\10"+
    "\1\14\2\0\1\14\1\0\15\14\1\55\16\0\11\14"+
    "\1\314\20\14\2\0\1\14\1\0\13\10\2\14\1\55"+
    "\5\0\1\56\10\0\4\10\1\14\3\10\1\14\6\10"+
    "\1\14\3\10\1\251\5\10\1\14\2\0\1\14\1\0"+
    "\15\14\1\55\16\0\23\14\1\315\6\14\2\0\1\14"+
    "\1\0\13\10\2\14\1\55\5\0\1\56\10\0\4\10"+
    "\1\14\3\10\1\14\1\316\5\10\1\14\11\10\1\14"+
    "\2\0\1\14\1\0\13\10\2\14\1\55\5\0\1\56"+
    "\10\0\1\317\3\10\1\14\3\10\1\14\6\10\1\14"+
    "\11\10\1\14\2\0\1\14\2\0\5\320\2\0\1\320"+
    "\23\0\3\320\3\0\1\320\20\0\2\320\57\0\2\204"+
    "\54\0\1\321\74\0\1\254\67\0\2\220\101\0\1\322"+
    "\33\0\1\323\120\0\1\204\67\0\2\324\110\0\1\204"+
    "\54\0\1\325\77\0\1\204\21\0\13\10\2\14\1\55"+
    "\5\0\1\56\10\0\1\10\1\173\2\10\1\14\3\10"+
    "\1\14\6\10\1\14\11\10\1\14\2\0\1\14\1\0"+
    "\15\14\1\55\16\0\1\14\1\326\30\14\2\0\1\14"+
    "\1\0\13\10\2\14\1\55\5\0\1\56\10\0\4\10"+
    "\1\14\3\10\1\14\2\10\1\327\3\10\1\14\11\10"+
    "\1\14\2\0\1\14\1\0\13\10\2\14\1\55\5\0"+
    "\1\56\10\0\3\10\1\330\1\331\3\10\1\14\6\10"+
    "\1\14\11\10\1\14\2\0\1\14\2\0\5\14\2\0"+
    "\1\14\23\0\3\14\3\0\1\14\20\0\2\14\55\0"+
    "\1\252\55\0\1\254\111\0\1\204\24\0\1\204\62\0"+
    "\15\14\1\55\16\0\13\14\1\315\16\14\2\0\1\14"+
    "\1\0\13\10\2\14\1\55\5\0\1\56\10\0\1\10"+
    "\1\332\2\10\1\14\3\10\1\14\6\10\1\14\11\10"+
    "\1\14\2\0\1\14\1\0\13\10\2\14\1\55\5\0"+
    "\1\56\10\0\4\10\1\14\1\10\1\333\1\10\1\14"+
    "\6\10\1\14\11\10\1\14\2\0\1\14\1\0\15\14"+
    "\1\55\16\0\6\14\1\334\23\14\2\0\1\14\1\0"+
    "\13\10\2\14\1\55\5\0\1\56\10\0\1\10\1\70"+
    "\2\10\1\14\3\10\1\14\6\10\1\14\11\10\1\14"+
    "\2\0\1\14\1\0\13\10\2\14\1\55\5\0\1\56"+
    "\10\0\4\10\1\14\1\70\2\10\1\14\6\10\1\14"+
    "\11\10\1\14\2\0\1\14\1\0\15\14\1\55\16\0"+
    "\5\14\1\335\24\14\2\0\1\14\1\0\15\14\1\55"+
    "\16\0\7\14\2\172\21\14\2\0\1\14";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11484];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\10\1\11\14\1\1\11\1\1\1\11\32\1"+
    "\1\0\1\11\2\1\2\0\2\1\3\0\13\1\2\11"+
    "\15\0\42\1\1\0\12\1\5\0\1\11\16\0\23\1"+
    "\3\0\1\1\4\0\1\1\11\0\7\1\4\0\1\1"+
    "\7\0\5\1\4\0\1\1\1\0\10\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[221];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */


	/**
	 * Constructor.  We must have this here as JFLex does not generate a
	 * no parameter constructor.
	 */
	public MIPSTokenMaker() {
		super();
	}

	boolean BOLExcludingSpaces = true;


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addToken(int, int, int)
	 */
	private void addHyperlinkToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, true);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int tokenType) {
		addToken(zzStartRead, zzMarkedPos-1, tokenType);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addHyperlinkToken(int, int, int)
	 */
	private void addToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array The character array.
	 * @param start The starting offset in the array.
	 * @param end The ending offset in the array.
	 * @param tokenType The token's type.
	 * @param startOffset The offset in the document at which this token
	 *                    occurs.
	 */
	@Override
	public void addToken(char[] array, int start, int end, int tokenType, int startOffset) {
		super.addToken(array, start,end, tokenType, startOffset);
		zzStartRead = zzMarkedPos;
	}


	@Override
	public String[] getLineCommentStartAndEnd(int languageIndex) {
		return new String[] { ";", null };
	}


	/**
	 * Returns the first token in the linked list of tokens generated
	 * from <code>text</code>.  This method must be implemented by
	 * subclasses so they can correctly implement syntax highlighting.
	 *
	 * @param text The text from which to get tokens.
	 * @param initialTokenType The token type we should start with.
	 * @param startOffset The offset into the document at which
	 *                    <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing
	 *         the syntax highlighted text.
	 */
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

		resetTokenList();
		this.offsetShift = -text.offset + startOffset;

		// Start off in the proper state.
		int state = YYINITIAL;
		switch (initialTokenType) {
			default:
				state = YYINITIAL;
		}

		s = text;
		try {
			yyreset(zzReader);
			yybegin(state);
			return yylex();
		} catch (IOException ioe) {
			ioe.printStackTrace();
			return new TokenImpl();
		}

	}


	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>true</code> if EOF was reached, otherwise
	 *              <code>false</code>.
	 */
	private boolean zzRefill() {
		return zzCurrentPos>=s.offset+s.count;
	}


	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader   the new input stream
	 */
	public final void yyreset(Reader reader) {
		// 's' has been updated.
		zzBuffer = s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
		//zzStartRead = zzEndRead = s.offset;
		zzStartRead = s.offset;
		zzEndRead = zzStartRead + s.count - 1;
		zzCurrentPos = zzMarkedPos = s.offset;
		zzLexicalState = YYINITIAL;
		zzReader = reader;
		zzAtBOL  = true;
		BOLExcludingSpaces = true;
		zzAtEOF  = false;
	}




  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public MIPSTokenMaker(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 3524) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }
    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzMarkedPosL > 0) {
        switch (zzBufferL[zzMarkedPosL-1]) {
        case '\n':
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            switch (zzLexicalState) {
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 222: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { addToken(Token.IDENTIFIER);
            }
          case 19: break;
          case 2: 
            { addToken(Token.RESERVED_WORD);
            }
          case 20: break;
          case 3: 
            { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
            }
          case 21: break;
          case 4: 
            { if(BOLExcludingSpaces){
              addToken(Token.IDENTIFIER);
          }else{
                addToken(Token.VARIABLE);
          }
            }
          case 22: break;
          case 5: 
            { addToken(Token.ERROR_STRING_DOUBLE); addNullToken(); return firstToken;
            }
          case 23: break;
          case 6: 
            { addToken(Token.ERROR_CHAR); /*addNullToken(); return firstToken;*/
            }
          case 24: break;
          case 7: 
            { addToken(Token.COMMENT_EOL); addNullToken(); return firstToken;
            }
          case 25: break;
          case 8: 
            { addNullToken(); return firstToken;
            }
          case 26: break;
          case 9: 
            { addToken(Token.WHITESPACE);
          BOLExcludingSpaces = zzAtBOL;
            }
          case 27: break;
          case 10: 
            { addToken(Token.OPERATOR);
            }
          case 28: break;
          case 11: 
            { addToken(Token.VARIABLE);
            }
          case 29: break;
          case 12: 
            { addToken(Token.LITERAL_NUMBER_HEXADECIMAL);
            }
          case 30: break;
          case 13: 
            { addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
            }
          case 31: break;
          case 14: 
            { addToken(Token.LITERAL_CHAR);
            }
          case 32: break;
          case 15: 
            { addToken(Token.RESERVED_WORD_2);
            }
          case 33: break;
          case 16: 
            { addToken(Token.FUNCTION);
            }
          case 34: break;
          case 17: 
            { addToken(Token.PREPROCESSOR);
            }
          case 35: break;
          case 18: 
            { addToken(Token.DATA_TYPE);
            }
          case 36: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
